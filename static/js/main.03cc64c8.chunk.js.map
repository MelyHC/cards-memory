{"version":3,"sources":["App.js","serviceWorker.js","index.js","back.PNG"],"names":["App","state","allCards","count","level","cards","compareCards","comparingCards","arrCards","currentCount","_this","_arrCards","Object","slicedToArray","firstCard","secondCard","setTimeout","forEach","card","img","index","visibility","flip","setState","handleClick","i","_this$state","find","cardCurrent","push","length","refreshPage","window","location","reload","selectLevel","e","_this$state2","preventDefault","levelSelected","parseInt","target","value","_loop","selectCard","Math","round","random","objectSpread","suffle","data","map","_ref","name","this","_this2","_this$state3","react_default","a","createElement","className","onClick","react","every","cardHide","_ref2","key","concat","src","alt","back","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.03cc64c8.chunk.js","sourcesContent":["import React, { Component, Fragment } from 'react';\r\nimport './App.css';\r\nimport data from './dataCards/dataCards.json';\r\nimport back from './back.PNG';\r\nimport suffle from 'shuffle-array';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    allCards: [],\r\n    count: 0,\r\n    level: 0,\r\n    cards: [],\r\n    compareCards: []\r\n  }\r\n\r\n  comparingCards = (arrCards, currentCount) => {\r\n    const { cards } = this.state;\r\n    const [firstCard, secondCard] = arrCards;\r\n\r\n    setTimeout(() => {\r\n      cards.forEach(card => {\r\n        if (firstCard.img === secondCard.img) {\r\n          if (card.index === firstCard.index || card.index === secondCard.index) {\r\n            card.visibility = true;\r\n          }\r\n        } else {\r\n          card.flip = false;\r\n        }\r\n      })\r\n\r\n      this.setState({ count: currentCount + 1 })\r\n    }, 1000)\r\n\r\n  }\r\n\r\n  handleClick = (i) => {\r\n    const { cards } = this.state;\r\n    let { count, compareCards } = this.state;\r\n\r\n    cards.forEach(card => {\r\n      if (card.index === i) {\r\n        card.flip = !card.flip;\r\n        if (!compareCards.find(cardCurrent => card === cardCurrent)) {\r\n          compareCards.push(card);\r\n          if (compareCards.length === 2) {\r\n            this.comparingCards(compareCards, count);\r\n            compareCards = [];\r\n          }\r\n        }\r\n      }\r\n    })\r\n\r\n    this.setState({ cards, compareCards })\r\n  }\r\n\r\n  refreshPage = () => window.location.reload();\r\n\r\n  selectLevel = (e) => {\r\n    const { allCards, cards } = this.state;\r\n    e.preventDefault();\r\n    const levelSelected = parseInt(e.target.value);\r\n\r\n    while (cards.length < levelSelected) {\r\n      const selectCard = allCards[Math.round(Math.random() * allCards.length)];\r\n      if (!cards.find(card => card === selectCard)) {\r\n        cards.push(selectCard);\r\n        cards.push({ ...selectCard, index: selectCard.index + 1 });\r\n      }\r\n    }\r\n\r\n    suffle(cards);\r\n\r\n    this.setState({ cards, level: levelSelected })\r\n  }\r\n\r\n  componentWillMount() {\r\n    const arrCards = data.map(({ name, img }, index) => {\r\n      return {\r\n        name,\r\n        img,\r\n        visibility: false,\r\n        flip: false,\r\n        index: name + index\r\n      }\r\n    });\r\n\r\n    this.setState({ allCards: arrCards })\r\n  }\r\n\r\n  render() {\r\n    const { cards, count, level } = this.state;\r\n\r\n    if (level === 0) {\r\n      return (\r\n        <div className=\"home d-flex justify-content-center align-items-center bg-black\">\r\n          <section className=\"bg-light px-2 py-5 rounded\">\r\n            <h5 className=\"m-2\">Elige un nivel para comenzar</h5>\r\n            <form onClick={this.selectLevel} className=\"d-flex justify-content-center mt-4\">\r\n              <button className=\"btn btn-primary m-2\" value=\"8\">Fácil</button>\r\n              <button className=\"btn btn-warning text-white m-2\" value=\"16\">Medio</button>\r\n              <button className=\"btn btn-danger m-2\" value=\"32\">Difícil</button>\r\n            </form>\r\n          </section>\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <Fragment>\r\n          <header className=\"d-flex justify-content-between bg-black text-white\">\r\n            <i className=\"fas fa-undo-alt btn icon-white\" onClick={this.refreshPage}></i>\r\n            <h4 className=\"d-inline-block text-center\">Cards Memory</h4>\r\n            <h5 className=\"m-1\">N°: {count}</h5>\r\n          </header>\r\n          <div className=\"container\">\r\n            {cards.every(cardHide => cardHide.visibility === true)\r\n              ? <div className=\"d-flex view justify-content-center align-items-center\">\r\n                <section className=\"rounded bg-light text-center p-2\">\r\n                  <h5 className=\"m-4\">¡Felicidades ganaste!</h5>\r\n                  <p>En {count} intentos <i className=\"fas fa-undo-alt btn\" onClick={this.refreshPage}></i></p>\r\n                </section>\r\n              </div>\r\n              : <div className=\"row m-0 p-0 view justify-content-center\">\r\n                {cards.map(({ name, img, visibility, flip, index }, i) =>\r\n                  <div className=\"col-6 col-sm-4 col-md-3 my-1 content-card\" key={index + i}>\r\n                    <figure className={`card-flip ${flip ? \"is-flipped\" : null} ${visibility ? \"hidden\" : null}`} onClick={() => this.handleClick(index)}>\r\n                      <img className=\"card-face card-face-front img-fluid rounded\" src={img} alt={name}></img>\r\n                      <img className=\"card-face img-fluid rounded\" src={back} alt=\"parte trasera de la carta\"></img>\r\n                    </figure>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            }\r\n          </div>\r\n        </Fragment>\r\n      )\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/back.a7d99895.PNG\";"],"sourceRoot":""}